{
  // Place your codewatch workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "StorageTestCase": {
    "scope": "javascript,typescript",
    "prefix": "storageTestCase",
    "body": [
      "import { GetStorageFunc } from \"dev/types\";",
      "import { StorageTest } from \"../StorageTest\";",
      "import { createCreateIssueData } from \"../utils\";",
      "",
      "export class ${1:TestCaseName} extends StorageTest {",
      "  constructor(getStorage: GetStorageFunc) {",
      "    super(getStorage);",
      "  }",
      "",
      "  run(): void {",
      "    it(\"${2:Description}\", async () => {",
      "      const now = new Date().toISOString();",
      "      const issueData = createCreateIssueData(now);",
      "      const storage = await this.getStorage();",
      "      const transaction = await storage.createTransaction();",
      "      try {",
      "        const issueId = await storage.createIssue(issueData, transaction);",
      "",
      "        ${3:TestLogic}",
      "",
      "        ",
      "      } catch (err) {",
      "        await transaction.rollbackAndEnd();",
      "        await storage.close();",
      "        throw err;",
      "      }",
      "",
      "      await transaction.end();",
      "      await storage.close();",
      "    });",
      "  }",
      "}"
    ],
    "description": "Create a storage test case"
  },
  "StorageTestScenario": {
    "scope": "javascript,typescript",
    "prefix": "storageScenario",
    "body": [
      "import { StorageScenario } from \"dev/storage/test/StorageScenario\";",
      "import { GetStorageFunc } from \"dev/types\";",
      "import { ${3:TestCaseClass} } from \"./${3:TestCaseClass}\";",
      "",
      "export class ${1:ScenarioName} extends StorageScenario {",
      "  constructor(getStorage: GetStorageFunc) {",
      "    super(getStorage);",
      "  }",
      "",
      "  /**",
      "   * Seeder: None",
      "   *",
      "   * Post-processor: None",
      "   */",
      "  ${4:test_case_name} = new ${3:TestCaseClass}(this.getTestObject);",
      "",
      "  run() {",
      "    describe(\"${2:Description}\", () => {",
      "      this.callHooks();",
      "      this.${4:test_case_name}.run();",
      "    });",
      "  }",
      "}"
    ],
    "description": "Create a storage test scenario"
  }
}
